//! Definitions for the `hpy` context
//!
//! DO NOT EDIT THIS FILE!
//!
//! This file is automatically generated by `tools/autogen.py` in
//! [hpy](https://github.com/pyhandle/hpy) from `tools/public_api.h`.
//!
//! ## How to regenerate
//!
//! * From an `hpy` checkout, run: ` make autogen`.
//! * The output file is `tools/autogen_rust.txt`, have it replace
//!   `src/context.rs` in the Rust `hpy` sources
//! * run `cargo fmt`

use crate::ffi::*;

#[derive(Debug)]
#[repr(C)]
pub struct _HPyContext_s {
    pub version: c_int,
    pub h_None: HPy,
    pub h_True: HPy,
    pub h_False: HPy,
    pub h_ValueError: HPy,
    pub h_TypeError: HPy,
    pub ctx_Module_Create: unsafe extern "C" fn(ctx: HPyContext, def: *mut HPyModuleDef) -> HPy,
    pub ctx_Dup: unsafe extern "C" fn(ctx: HPyContext, h: HPy) -> HPy,
    pub ctx_Close: unsafe extern "C" fn(ctx: HPyContext, h: HPy) -> c_void,
    pub ctx_Long_FromLong: unsafe extern "C" fn(ctx: HPyContext, value: c_long) -> HPy,
    pub ctx_Long_FromLongLong: unsafe extern "C" fn(ctx: HPyContext, v: c_longlong) -> HPy,
    pub ctx_Long_FromUnsignedLongLong: unsafe extern "C" fn(ctx: HPyContext, v: c_ulonglong) -> HPy,
    pub ctx_Long_AsLong: unsafe extern "C" fn(ctx: HPyContext, h: HPy) -> c_long,
    pub ctx_Float_FromDouble: unsafe extern "C" fn(ctx: HPyContext, v: c_double) -> HPy,
    pub ctx_Number_Add: unsafe extern "C" fn(ctx: HPyContext, h1: HPy, h2: HPy) -> HPy,
    pub ctx_Err_SetString:
        unsafe extern "C" fn(ctx: HPyContext, h_type: HPy, message: *mut c_char) -> c_void,
    pub ctx_Object_IsTrue: unsafe extern "C" fn(ctx: HPyContext, h: HPy) -> c_int,
    pub ctx_Bytes_Check: unsafe extern "C" fn(ctx: HPyContext, h: HPy) -> c_int,
    pub ctx_Bytes_Size: unsafe extern "C" fn(ctx: HPyContext, h: HPy) -> HPy_ssize_t,
    pub ctx_Bytes_GET_SIZE: unsafe extern "C" fn(ctx: HPyContext, h: HPy) -> HPy_ssize_t,
    pub ctx_Bytes_AsString: unsafe extern "C" fn(ctx: HPyContext, h: HPy) -> *mut c_char,
    pub ctx_Bytes_AS_STRING: unsafe extern "C" fn(ctx: HPyContext, h: HPy) -> *mut c_char,
    pub ctx_Unicode_FromString: unsafe extern "C" fn(ctx: HPyContext, utf8: *mut c_char) -> HPy,
    pub ctx_Unicode_Check: unsafe extern "C" fn(ctx: HPyContext, h: HPy) -> c_int,
    pub ctx_Unicode_AsUTF8String: unsafe extern "C" fn(ctx: HPyContext, h: HPy) -> HPy,
    pub ctx_Unicode_FromWideChar:
        unsafe extern "C" fn(ctx: HPyContext, w: *mut wchar_t, size: HPy_ssize_t) -> HPy,
    pub ctx_List_New: unsafe extern "C" fn(ctx: HPyContext, len: HPy_ssize_t) -> HPy,
    pub ctx_List_Append: unsafe extern "C" fn(ctx: HPyContext, h_list: HPy, h_item: HPy) -> c_int,
    pub ctx_Dict_New: unsafe extern "C" fn(ctx: HPyContext) -> HPy,
    pub ctx_Dict_SetItem:
        unsafe extern "C" fn(ctx: HPyContext, h_dict: HPy, h_key: HPy, h_val: HPy) -> c_int,
    pub ctx_Dict_GetItem: unsafe extern "C" fn(ctx: HPyContext, h_dict: HPy, h_key: HPy) -> HPy,
    pub ctx_FromPyObject: unsafe extern "C" fn(ctx: HPyContext, obj: *mut PyObject) -> HPy,
    pub ctx_AsPyObject: unsafe extern "C" fn(ctx: HPyContext, h: HPy) -> *mut PyObject,
    pub ctx_CallRealFunctionFromTrampoline: unsafe extern "C" fn(
        ctx: HPyContext,
        slf: *mut PyObject,
        args: *mut PyObject,
        kw: *mut PyObject,
        func: *mut c_void,
        ml_flags: c_int,
    ) -> *mut PyObject,
}

pub type HPyContext = *mut _HPyContext_s;
